version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db
      
  product-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - 3002:3002
      - 50051:50051
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/ecommerce
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50051
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - .:/app
    entrypoint: ["node", "src/product-service/index.js"]
    depends_on:
      - mongodb
      - kafka
      
  order-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - 3003:3003
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/ecommerce
      - GRPC_HOST=product-service
      - GRPC_PORT=50051
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - .:/app
    entrypoint: ["node", "src/order-service/index.js"]
    depends_on:
      - mongodb
      - product-service
      - kafka
      
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - 3001:3001
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/ecommerce
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - .:/app
    entrypoint: ["node", "src/auth-service/index.js"]
    depends_on:
      - mongodb
      - kafka
      
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - 3000:3000
    environment:
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - ORDER_SERVICE_URL=http://order-service:3003
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - .:/app
    entrypoint: ["node", "src/api-gateway/index.js"]
    depends_on:
      - auth-service
      - product-service
      - order-service
      
  notification-service:
    build:
      context: ./src/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - 3004:3004
    environment:
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=order-events
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PORT=3004
      - HOST=0.0.0.0
      - EMAIL_SERVICE=mailjet
      - EMAIL_HOST=in-v3.mailjet.com
      - EMAIL_PORT=587
      - EMAIL_USER=018cd022d998484178167bd4e2ed76ae
      - EMAIL_FROM=amine.ouhiba@polytechnicien.tn
      - ADMIN_EMAIL=amibz2001@gmail.com
      - EMAIL_PASSWORD=cc2e938b41484c50b9e995fbe1e94882
    restart: always
    depends_on:
      - kafka
      - auth-service
      
volumes:
  mongodb_data: